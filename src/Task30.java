
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Random;
import java.util.regex.MatchResult;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author anastasiia
 */
public class Task30 extends javax.swing.JFrame {

    /**
     * Creates new form Task29
     */
    public Task30() {
        initComponents();
        jFileChooser1.addActionListener(this.loadActionListener);
        jFileChooser1.addActionListener(this.saveActionListener);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jdFileOpen = new javax.swing.JDialog();
        jFileChooser1 = new javax.swing.JFileChooser();
        jbOpen = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jtfInt = new javax.swing.JTextField();
        jtfChar = new javax.swing.JTextField();
        jtfFloat = new javax.swing.JTextField();
        jtfInt5 = new javax.swing.JTextField();
        jbInt = new javax.swing.JButton();
        jbChar = new javax.swing.JButton();
        jbFloat = new javax.swing.JButton();
        jbInt5 = new javax.swing.JButton();
        jbSave = new javax.swing.JButton();

        jdFileOpen.setMinimumSize(new java.awt.Dimension(300, 200));
        jdFileOpen.setSize(new java.awt.Dimension(300, 200));

        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser1ActionLoadPerformed(evt);
                jFileChooser1ActionSavePerformed(evt);
            }
        });
        jdFileOpen.getContentPane().add(jFileChooser1, java.awt.BorderLayout.CENTER);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jbOpen.setText("Load");
        jbOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbOpenActionPerformed(evt);
            }
        });

        jLabel2.setText("int");

        jLabel3.setText("char");

        jLabel4.setText("float");

        jLabel5.setText("int[5]");

        jtfInt5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfInt5ActionPerformed(evt);
            }
        });

        jbInt.setText("generate");
        jbInt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbIntActionPerformed(evt);
            }
        });

        jbChar.setText("generate");
        jbChar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCharActionPerformed(evt);
            }
        });

        jbFloat.setText("generate");
        jbFloat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbFloatActionPerformed(evt);
            }
        });

        jbInt5.setText("generate");
        jbInt5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbInt5ActionPerformed(evt);
            }
        });

        jbSave.setText("Save");
        jbSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(307, 307, 307)
                        .addComponent(jbOpen))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfInt)
                            .addComponent(jtfChar, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jtfFloat, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jtfInt5, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jbInt5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jbFloat, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jbChar, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jbInt, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbSave)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbOpen)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbSave)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtfInt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbInt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jtfChar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbChar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jtfFloat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbFloat))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jtfInt5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbInt5))
                .addContainerGap(132, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbOpenActionPerformed
        // TODO add your handling code here:
        jdFileOpen.setVisible(true);
        //JFileChooser.APPROVE_SELECTION
        jFileChooser1.setDialogType(JFileChooser.OPEN_DIALOG);
       

    }//GEN-LAST:event_jbOpenActionPerformed

    private void jtfInt5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfInt5ActionPerformed
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_jtfInt5ActionPerformed

    private void jbSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSaveActionPerformed
        // TODO add your handling code here:
         jdFileOpen.setVisible(true);
        //JFileChooser.APPROVE_SELECTION
        jFileChooser1.setDialogType(JFileChooser.SAVE_DIALOG);
    }//GEN-LAST:event_jbSaveActionPerformed

    private void jbIntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbIntActionPerformed
        // TODO add your handling code here:
        this.inval = (int)(Math.random()*(((double)Integer.MAX_VALUE) - Integer.MIN_VALUE) + (double)Integer.MIN_VALUE);
        Integer v = inval;
        jtfInt.setText(v.toString());
    }//GEN-LAST:event_jbIntActionPerformed

    private void jbCharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCharActionPerformed
        // TODO add your handling code here:
        this.charval = (char)(Math.random()*((double)255 - 0) );
        char v = charval;
        jtfChar.setText(""+v);
    }//GEN-LAST:event_jbCharActionPerformed

    private void jbFloatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbFloatActionPerformed
        // TODO add your handling code here:
        this.floatval = randFloat(-10, 10);
        Float v = floatval;
        jtfFloat.setText(""+v);
    }//GEN-LAST:event_jbFloatActionPerformed

    private void jbInt5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbInt5ActionPerformed
        // TODO add your handling code here:

        int k=1;
        String toShow = "";
        intarr = new int[5];
        
        for(int i=0;i<5;++i)
        {
            intarr[i] = k;
            k *= (i+1);
            toShow += k;
            toShow += (i<4)?", ":"";
        }
        
        jtfInt5.setText(toShow);
    }//GEN-LAST:event_jbInt5ActionPerformed

    private void jFileChooser1ActionLoadPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionLoadPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFileChooser1ActionLoadPerformed

    private void jFileChooser1ActionSavePerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionSavePerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFileChooser1ActionSavePerformed

    public static float randFloat(float min, float max) {

        Random rand = new Random();

        return (float)rand.nextDouble(min, max);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Task30.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Task30.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Task30.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Task30.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Task30().setVisible(true);
            }
        });
    }
    
    void updateNumericalFromTextFields() throws Exception
    {
        inval = Integer.parseInt(jtfInt.getText());
        charval = (jtfChar.getText()).charAt(0);
        floatval = Float.parseFloat(jtfFloat.getText());
        
        Pattern p = Pattern.compile("\\d+");
        Matcher m = p.matcher(jtfInt5.getText());
        List<Integer> list = new ArrayList<Integer>();
        while(m.find())
        {
            String s = m.group();
            list.add(Integer.parseInt(s));
        }
        
        intarr = new int[(int)list.size()];
        
        
        
        for(int i = 0;i<(int)list.size();++i)
        {
            
            intarr[i] = list.get(i);
        }
    }
    
    void updateTextFieldsFromNumerical()
    {
        Integer i = inval;
        Float f = floatval;
        
        jtfInt.setText(i.toString());
        jtfFloat.setText(f.toString());
        jtfChar.setText(""+charval);
        
        String s = "";
        
        for(int ii = 0;ii<intarr.length;++ii)
        {
            i = intarr[ii];
            s += i.toString() + ((ii<(intarr.length-1))?", ":"");
        }
        
        jtfInt5.setText(s);
    }
    
    
    
    private int inval;
    private char charval;
    private float floatval;
    private int intarr[];
    
    private ActionListener saveActionListener = (ae) -> {
        
            if(this.jFileChooser1.getDialogType() != (JFileChooser.SAVE_DIALOG))
                return;
            
            if(ae.getActionCommand().equals(JFileChooser.APPROVE_SELECTION))
            {
                try{
                    this.updateNumericalFromTextFields();
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(null, e.toString(), "Error: parsing exception " , JOptionPane.ERROR_MESSAGE);
                    this.jdFileOpen.setVisible(false);
                    return;
                }
                
                try(RandomAccessFile dos = new RandomAccessFile(this.jFileChooser1.getSelectedFile(),"rw")) {
                    int off = 0;
                    dos.writeInt(this.inval);
                    dos.writeChar(this.charval);
                    dos.writeFloat(this.floatval);
                    for(int i=0;i<intarr.length;++i)
                        dos.writeInt(this.intarr[i]);
                    //...
                }
                catch(IOException e){              
                    System.out.println(e.getMessage());
                    JOptionPane.showMessageDialog(null, e.toString(), "Error: file io " , JOptionPane.ERROR_MESSAGE);
                }
                
                
                this.jdFileOpen.setVisible(false);
            }
            else
            {
                this.jdFileOpen.setVisible(false);
            }
        };
    
    
    private ActionListener loadActionListener = (ae) -> {
            if(this.jFileChooser1.getDialogType() != (JFileChooser.OPEN_DIALOG))
                return;
            if(ae.getActionCommand().equals(JFileChooser.APPROVE_SELECTION))
            {

                
                try(RandomAccessFile dos = new RandomAccessFile(this.jFileChooser1.getSelectedFile(),"r")) {
                    int off = 0;
                    this.inval = dos.readInt();
                    off+=Integer.BYTES;
                    dos.seek(off);
                    this.charval = dos.readChar();
                    off+=Character.BYTES;
                    dos.seek(off);
                    this.floatval = dos.readFloat();
                    off+=Float.BYTES;
                    dos.seek(off);
                    
                    List<Integer> list = new ArrayList<Integer>();
                    int v = 0;
                    while(dos.length()>off)
                    {    
                        list.add(dos.readInt());
                        off+=Integer.BYTES;
                        dos.seek(off);
                    
                    }
                    
                    this.intarr = new int[list.size()];
                    for(int i=0;i<list.size();++i)
                    {
                        this.intarr[i] = list.get(i);
                    }
                    //...
                }
                catch(IOException e){              
                    System.out.println(e.getMessage());
                    JOptionPane.showMessageDialog(null, e.toString(), "Error: file io " , JOptionPane.ERROR_MESSAGE);
                    this.jdFileOpen.setVisible(false);
                    return;
                }
                
                
                try{
                    this.updateTextFieldsFromNumerical();
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(null, e.toString(), "Error: parsing exception " , JOptionPane.ERROR_MESSAGE);
                }
                
                
                this.jdFileOpen.setVisible(false);
            }
            else
            {
                this.jdFileOpen.setVisible(false);
            }
        };
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JButton jbChar;
    private javax.swing.JButton jbFloat;
    private javax.swing.JButton jbInt;
    private javax.swing.JButton jbInt5;
    private javax.swing.JButton jbOpen;
    private javax.swing.JButton jbSave;
    private javax.swing.JDialog jdFileOpen;
    private javax.swing.JTextField jtfChar;
    private javax.swing.JTextField jtfFloat;
    private javax.swing.JTextField jtfInt;
    private javax.swing.JTextField jtfInt5;
    // End of variables declaration//GEN-END:variables

    private Exception IllegalArgumentException(String string) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
